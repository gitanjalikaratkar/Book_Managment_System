{"ast":null,"code":"var _jsxFileName = \"E:\\\\Aa Seven Mentor\\\\Web Development Onkar Nagarkar\\\\React\\\\Book Management System\\\\book_managment_system\\\\src\\\\components\\\\Book.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './Book.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Book(props) {\n  _s();\n  let [isUpdating, setIdUpdating] = useState(false);\n  let [updatedTitle, setUpdatedTitle] = useState(props.title);\n  let [updatedAuthor, setUpdatedAuthor] = useState(props.author);\n  let [updatedPrice, setUpdatedPrice] = useState(props.price);\n  function handleTitleChnage(event) {\n    setUpdatedTitle(event.target.value);\n  }\n  function handleAuthorChnage(event) {\n    setUpdatedAuthor(event.target.value);\n  }\n  function handlePriceChnage(event) {\n    setUpdatedPrice(event.target.value);\n  }\n  function handleUpdate() {\n    let book;\n    if (isUpdating) {\n      book = {\n        id: props.id,\n        title: updatedTitle,\n        author: updatedAuthor,\n        price: updatedPrice\n      };\n      fetch(`http://localhost:8000/books/${props.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(book)\n      }).then(() => {\n        let newBooks = [...props.books];\n        newBooks.map((element, idx) => {\n          if (element.id === book.id) {\n            newBooks.splice(idx, 1, book);\n          }\n        });\n        props.setBooks(newBooks);\n        setIdUpdating(false);\n      });\n    } else {\n      setIdUpdating(true);\n    }\n  }\n  return (\n    /*#__PURE__*/\n    /*  <div className=\"book-container\">\r\n         <span id='container-data1' className=\"book-data\">{props.id}</span>\r\n         {\r\n             isUpdating ? <input type=\"text\" className=\"input-data\" id='input-data2' value={updatedTitle} onChange={handleTitleChnage} /> : <span id='container-data2' className=\"book-data\">{props.title}</span>\r\n         }\r\n         {\r\n             isUpdating ? <input type=\"text\" className=\"input-data\" id='input-data3' value={updatedAuthor} onChange={handleAuthorChnage} /> : <span id='container-data3' className=\"book-data\">{props.author}</span>\r\n         }\r\n         {\r\n             isUpdating ? <input type=\"text\" className=\"input-data\" id='input-data4' value={updatedPrice} onChange={handlePriceChnage} /> : <span id='container-data4' className=\"book-data\">{props.price}</span>\r\n         }\r\n               <button id='btnRemove' onClick={() => { props.handleRemove(props.id) }}>Remove</button>\r\n         <button id='btnUpdate' onClick={handleUpdate}>\r\n             {\r\n                 isUpdating ? \"Save\" : \"Update\"\r\n             }\r\n         </button>\r\n     </div> */\n    _jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"input-group flex-nowrap\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"input-group-text\",\n          id: \"addon-wrapping\",\n          children: \"@\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          class: \"form-control\",\n          placeholder: \"Username\",\n          \"aria-label\": \"Username\",\n          \"aria-describedby\": \"addon-wrapping\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)\n  );\n}\n_s(Book, \"Dq4WkTmjuhIXkGyrbgNCpAJ7VF8=\");\n_c = Book;\nexport default Book;\n\n/* \r\nlet book\r\n        if (isUpdating == true) {\r\n            book = {\r\n                id: props.id,\r\n                title: updatedTitle,\r\n                author: updatedAuthor,\r\n                price: updatedPrice\r\n            }\r\n            \r\n            let newBooks = [...props.books];\r\n            newBooks.map(\r\n                (element, idx) => {\r\n                    if (element.id == book.id) {\r\n                        newBooks.splice(idx, 1, book);\r\n                    }\r\n                }\r\n            )\r\n\r\n            props.setBooks(newBooks);\r\n            setIdUpdating(false)\r\n        }\r\n        else {\r\n            setIdUpdating(true)\r\n        }\r\n*/\nvar _c;\n$RefreshReg$(_c, \"Book\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Book","props","_s","isUpdating","setIdUpdating","updatedTitle","setUpdatedTitle","title","updatedAuthor","setUpdatedAuthor","author","updatedPrice","setUpdatedPrice","price","handleTitleChnage","event","target","value","handleAuthorChnage","handlePriceChnage","handleUpdate","book","id","fetch","method","headers","body","JSON","stringify","then","newBooks","books","map","element","idx","splice","setBooks","children","class","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","_c","$RefreshReg$"],"sources":["E:/Aa Seven Mentor/Web Development Onkar Nagarkar/React/Book Management System/book_managment_system/src/components/Book.jsx"],"sourcesContent":["import { useState } from 'react'\r\nimport './Book.css'\r\n\r\nfunction Book(props) {\r\n    let [isUpdating, setIdUpdating] = useState(false);\r\n    let [updatedTitle, setUpdatedTitle] = useState(props.title)\r\n    let [updatedAuthor, setUpdatedAuthor] = useState(props.author)\r\n    let [updatedPrice, setUpdatedPrice] = useState(props.price)\r\n\r\n    function handleTitleChnage(event) {\r\n        setUpdatedTitle(event.target.value)\r\n    }\r\n    function handleAuthorChnage(event) {\r\n        setUpdatedAuthor(event.target.value)\r\n    }\r\n    function handlePriceChnage(event) {\r\n        setUpdatedPrice(event.target.value)\r\n    }\r\n\r\n    function handleUpdate() {\r\n        let book\r\n        if (isUpdating) {\r\n            book = {\r\n                id: props.id,\r\n                title: updatedTitle,\r\n                author: updatedAuthor,\r\n                price: updatedPrice\r\n            }\r\n            fetch(`http://localhost:8000/books/${props.id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(book)\r\n            })\r\n                .then(() => {\r\n                    let newBooks = [...props.books];\r\n                    newBooks.map(\r\n                        (element, idx) => {\r\n                            if (element.id === book.id) {\r\n                                newBooks.splice(idx, 1, book);\r\n                            }\r\n                        }\r\n                    )\r\n\r\n                    props.setBooks(newBooks);\r\n                    setIdUpdating(false);\r\n                })\r\n        }\r\n        else {\r\n            setIdUpdating(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        /*  <div className=\"book-container\">\r\n             <span id='container-data1' className=\"book-data\">{props.id}</span>\r\n             {\r\n                 isUpdating ? <input type=\"text\" className=\"input-data\" id='input-data2' value={updatedTitle} onChange={handleTitleChnage} /> : <span id='container-data2' className=\"book-data\">{props.title}</span>\r\n             }\r\n             {\r\n                 isUpdating ? <input type=\"text\" className=\"input-data\" id='input-data3' value={updatedAuthor} onChange={handleAuthorChnage} /> : <span id='container-data3' className=\"book-data\">{props.author}</span>\r\n             }\r\n             {\r\n                 isUpdating ? <input type=\"text\" className=\"input-data\" id='input-data4' value={updatedPrice} onChange={handlePriceChnage} /> : <span id='container-data4' className=\"book-data\">{props.price}</span>\r\n             }\r\n \r\n \r\n             <button id='btnRemove' onClick={() => { props.handleRemove(props.id) }}>Remove</button>\r\n             <button id='btnUpdate' onClick={handleUpdate}>\r\n                 {\r\n                     isUpdating ? \"Save\" : \"Update\"\r\n                 }\r\n             </button>\r\n         </div> */\r\n\r\n        <div>\r\n            <div class=\"input-group flex-nowrap\">\r\n                <span class=\"input-group-text\" id=\"addon-wrapping\">@</span>\r\n                <input type=\"text\" class=\"form-control\" placeholder=\"Username\" aria-label=\"Username\" aria-describedby=\"addon-wrapping\"/>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Book;\r\n\r\n\r\n/* \r\nlet book\r\n        if (isUpdating == true) {\r\n            book = {\r\n                id: props.id,\r\n                title: updatedTitle,\r\n                author: updatedAuthor,\r\n                price: updatedPrice\r\n            }\r\n            \r\n            let newBooks = [...props.books];\r\n            newBooks.map(\r\n                (element, idx) => {\r\n                    if (element.id == book.id) {\r\n                        newBooks.splice(idx, 1, book);\r\n                    }\r\n                }\r\n            )\r\n\r\n            props.setBooks(newBooks);\r\n            setIdUpdating(false)\r\n        }\r\n        else {\r\n            setIdUpdating(true)\r\n        }\r\n*/\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,YAAY;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,IAAIA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACjB,IAAI,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACjD,IAAI,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAACI,KAAK,CAACM,KAAK,CAAC;EAC3D,IAAI,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAACI,KAAK,CAACS,MAAM,CAAC;EAC9D,IAAI,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAACI,KAAK,CAACY,KAAK,CAAC;EAE3D,SAASC,iBAAiBA,CAACC,KAAK,EAAE;IAC9BT,eAAe,CAACS,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACvC;EACA,SAASC,kBAAkBA,CAACH,KAAK,EAAE;IAC/BN,gBAAgB,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACxC;EACA,SAASE,iBAAiBA,CAACJ,KAAK,EAAE;IAC9BH,eAAe,CAACG,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACvC;EAEA,SAASG,YAAYA,CAAA,EAAG;IACpB,IAAIC,IAAI;IACR,IAAIlB,UAAU,EAAE;MACZkB,IAAI,GAAG;QACHC,EAAE,EAAErB,KAAK,CAACqB,EAAE;QACZf,KAAK,EAAEF,YAAY;QACnBK,MAAM,EAAEF,aAAa;QACrBK,KAAK,EAAEF;MACX,CAAC;MACDY,KAAK,CAAE,+BAA8BtB,KAAK,CAACqB,EAAG,EAAC,EAAE;QAC7CE,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;MAC7B,CAAC,CAAC,CACGQ,IAAI,CAAC,MAAM;QACR,IAAIC,QAAQ,GAAG,CAAC,GAAG7B,KAAK,CAAC8B,KAAK,CAAC;QAC/BD,QAAQ,CAACE,GAAG,CACR,CAACC,OAAO,EAAEC,GAAG,KAAK;UACd,IAAID,OAAO,CAACX,EAAE,KAAKD,IAAI,CAACC,EAAE,EAAE;YACxBQ,QAAQ,CAACK,MAAM,CAACD,GAAG,EAAE,CAAC,EAAEb,IAAI,CAAC;UACjC;QACJ,CACJ,CAAC;QAEDpB,KAAK,CAACmC,QAAQ,CAACN,QAAQ,CAAC;QACxB1B,aAAa,CAAC,KAAK,CAAC;MACxB,CAAC,CAAC;IACV,CAAC,MACI;MACDA,aAAa,CAAC,IAAI,CAAC;IACvB;EACJ;EAEA;IAAA;IACI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAIQL,OAAA;MAAAsC,QAAA,eACItC,OAAA;QAAKuC,KAAK,EAAC,yBAAyB;QAAAD,QAAA,gBAChCtC,OAAA;UAAMuC,KAAK,EAAC,kBAAkB;UAAChB,EAAE,EAAC,gBAAgB;UAAAe,QAAA,EAAC;QAAC;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC3D3C,OAAA;UAAO4C,IAAI,EAAC,MAAM;UAACL,KAAK,EAAC,cAAc;UAACM,WAAW,EAAC,UAAU;UAAC,cAAW,UAAU;UAAC,oBAAiB;QAAgB;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;AAGd;AAACxC,EAAA,CAjFQF,IAAI;AAAA6C,EAAA,GAAJ7C,IAAI;AAmFb,eAAeA,IAAI;;AAGnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}